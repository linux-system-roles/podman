# SPDX-License-Identifier: MIT
- name: Set per-container variables part 1
  set_fact:
    __podman_container: "{{ __podman_container_item | dict2items |
      rejectattr('key', 'match', 'run_as_user$') |
      rejectattr('key', 'match', 'run_as_group$') |
      rejectattr('key', 'match', 'generate_systemd$') |
      rejectattr('key', 'match', 'systemd_unit_scope$') |
      list | items2dict | combine({'state': __state}) }}"
    __podman_user: "{{ __podman_container_item['run_as_user'] |
      d(podman_run_as_user) }}"
    __podman_systemd_param: "{{ __podman_container_item['generate_systemd']
      if __podman_container['generate_systemd'] is mapping
      else dict() }}"
    __podman_systemd_unit_scope: "{{
      __podman_container_item['systemd_unit_scope'] |
      d(podman_systemd_unit_scope) }}"
    __podman_state: "{{ __state }}"
  vars:
    __state: "{{ ((__podman_container_item['state'] | d('')) == 'absent') |
      ternary('absent', 'created') }}"

- name: Set per-container variables part 2
  set_fact:
    __podman_rootless: "{{ __podman_user != 'root' }}"

- name: Get user information
  getent:
    database: passwd
    key: "{{ __podman_user }}"
    fail_key: false

- name: Fail if user does not exist
  fail:
    msg: >
      The given podman user [{{ __podman_user }}] does not exist -
      cannot continue
  when: not ansible_facts['getent_passwd'][__podman_user]

- name: Set per-container variables part 3
  set_fact:
    __podman_group: |-
      {%- if 'run_as_group' in __podman_container_item -%}
      {{ __podman_container_item['run_as_group'] }}
      {%- elif podman_run_as_group is not none -%}
      {{ podman_run_as_group }}
      {%- else -%}
      {{ ansible_facts['getent_passwd'][__podman_user][2] }}
      {%- endif -%}
    __podman_xdg_runtime_dir: >-
      /run/user/{{ ansible_facts['getent_passwd'][__podman_user][1] }}
    __podman_user_home_dir: "{{
      ansible_facts['getent_passwd'][__podman_user][4] }}"
    __podman_unit_basename: "{{ __podman_systemd_prefix ~ '-' ~
      __podman_container['name'] }}"
    __podman_systemd_scope: "{{ __podman_systemd_unit_scope
      if not __podman_systemd_unit_scope is none
      and __podman_systemd_unit_scope | length > 0
      else __podman_rootless | ternary('user', 'system') }}"
    __podman_activate_systemd_unit: true

- name: Set per-container variables part 4
  set_fact:
    __podman_service_name: "{{ __podman_unit_basename ~ '.service' }}"
    __podman_systemd_path: "{{ __podman_user_home_dir ~
      __podman_systemd_non_root_path
      if __podman_rootless else __podman_systemd_root_path }}"

- name: Set per-container variables part 5
  set_fact:
    __podman_systemd_unit_filename: "{{ __podman_systemd_path ~ '/' ~
      __podman_service_name }}"

- name: Cleanup containers and services
  include_tasks: cleanup_container.yml
  when: __podman_state == 'absent'

- name: Create and update containers and services
  include_tasks: create_update_container.yml
  when: __podman_state != 'absent'
