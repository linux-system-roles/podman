- name: Check if user is lingering
  stat:
    path: "/var/lib/systemd/linger/{{ __podman_user }}"
  register: __podman_user_lingering
  when: __podman_rootless | bool

- name: Enable lingering if needed
  command: loginctl enable-linger {{ __podman_user }}
  when:
    - __podman_rootless | bool
    - not __podman_user_lingering.stat.exists

- name: Get the mounts from podman_containers
  set_fact:
    __podman_mounts: "{{ __podman_container[__mount_attr] | d([]) |
      select('search', 'type=bind') |
      map('regex_replace', '^.*source=([^,]+).*$', '\\1') | list }}"
    __podman_volumes: "{{ __podman_container[__volume_attr] | d([]) |
      map('regex_replace', '^([^:]+).*$', '\\1') | list }}"
  vars:
    __mount_attr: "{{ ('mounts' in __podman_container) |
      ternary('mounts', 'mount') }}"
    __volume_attr: "{{ ('volumes' in __podman_container) |
      ternary('volumes', 'volume') }}"
  when: podman_create_host_directories | bool

- name: Create host directories
  file: "{{ __defaults | combine(podman_host_directories[__hostitem])
            if __hostitem in podman_host_directories | d({})
            else __defaults }}"
  vars:
    __hostitem: "{{ item if item in podman_host_directories | d({})
      else 'DEFAULT' }}"
    __owner_group: "{{ {'owner': __podman_user, 'group': __podman_group}
      if __podman_rootless else {'owner': 'root', 'group': 'root'} }}"
    __defaults: "{{ {'path': item} | combine(__podman_hostdirs_defaults) |
      combine(__owner_group) }}"
  loop: "{{ __podman_mounts | union(__podman_volumes) }}"
  when:
    - podman_create_host_directories | bool
    - __podman_mounts or __podman_volumes

- name: Ensure container image is present
  containers.podman.podman_image:
    name: "{{ __podman_container['image'] }}"
    force: true
    username: "{{ container_image_user | default(omit) }}"
    password: "{{ container_image_password | default(omit) }}"
  register: __podman_image_updated
  environment:
    XDG_RUNTIME_DIR: "{{ __podman_xdg_runtime_dir }}"
  become: "{{ __podman_rootless | ternary(true, omit) }}"
  become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"

- name: Update container
  containers.podman.podman_container: "{{ __podman_container |
    combine({'generate_systemd': __systemd_param})
    if 'generate_systemd' in __podman_container_item
    else __podman_container }}"
  environment:
    XDG_RUNTIME_DIR: "{{ __podman_xdg_runtime_dir }}"
  become: "{{ __podman_rootless | ternary(true, omit) }}"
  become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"
  vars:
    __systemd_defaults:
      container_prefix: "{{ __podman_systemd_prefix }}"
      no_header: true
      new: true
    __systemd_param: "{{ __podman_systemd_param | dict2items |
      selectattr('key', 'match', 'new$') |
      selectattr('key', 'match', 'restart_policy$') |
      selectattr('key', 'match', 'time$') | list |
      items2dict | combine(__systemd_defaults) }}"
  register: __podman_container_info

- name: Ensure systemd unit file and service state
  when: __podman_container_item.get('generate_systemd')
  block:
    - name: Manage systemd files directory exists if user not root
      file:
        path: "{{ __podman_systemd_path }}"
        state: directory
        owner: "{{ __podman_user }}"
        group: "{{ __podman_group }}"
        mode: "0700"
      when:
        - __podman_rootless | bool

    - name: Get stat of existing systemd unit file
      stat:
        path: "{{ __podman_systemd_unit_filename }}"
      become: "{{ __podman_rootless | ternary(true, omit) }}"
      become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"
      register: __podman_systemd_unit

    - name: Get contents of existing file
      slurp:
        src: "{{ __podman_systemd_unit_filename }}"
      register: __podman_systemd_unit_content
      when: __podman_systemd_unit.stat.exists

    - name: Construct contents of new file
      set_fact:
        __podman_systemd_new_content: "{{
          lookup('template', 'get_ansible_managed.j2') ~
          __podman_container_info['podman_systemd'][__podman_unit_basename] }}"

    - name: Update existing systemd unit file
      copy:
        content: "{{ __new_systemd_content }}"
        dest: "{{ __podman_systemd_unit_filename }}"
        mode: preserve
      become: "{{ __podman_rootless | ternary(true, omit) }}"
      become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"
      vars:
        __current_content: "{{
          __podman_systemd_unit_content['content'] | b64decode }}"
      when:
        - __podman_systemd_unit.stat.exists
        - __current_content != __podman_systemd_new_content
      register: __podman_updated

    - name: Create new systemd unit file
      copy:
        content: "{{ __podman_systemd_new_content }}"
        dest: "{{ __podman_systemd_unit_filename }}"
        owner: "{{ __podman_user }}"
        mode: "0600"
      when:
        - not __podman_systemd_unit.stat.exists
      register: __podman_created

    - name: Reload systemctl
      systemd:
        daemon_reload: true
        scope: "{{ __podman_systemd_scope }}"
      become: "{{ __podman_rootless | ternary(true, omit) }}"
      become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"
      environment:
        XDG_RUNTIME_DIR: "{{ __podman_xdg_runtime_dir }}"
      when: __podman_updated is changed or __podman_created is changed

    - name: Enable service
      systemd:
        name: "{{ __podman_service_name }}"
        scope: "{{ __podman_systemd_scope }}"
        enabled: true
      become: "{{ __podman_rootless | ternary(true, omit) }}"
      become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"
      environment:
        XDG_RUNTIME_DIR: "{{ __podman_xdg_runtime_dir }}"
      when:
        - __podman_updated is changed or __podman_created is changed
        - __podman_activate_systemd_unit | bool

    - name: Start service
      systemd:
        name: "{{ __podman_service_name }}"
        scope: "{{ __podman_systemd_scope }}"
        state: started
      become: "{{ __podman_rootless | ternary(true, omit) }}"
      become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"
      environment:
        XDG_RUNTIME_DIR: "{{ __podman_xdg_runtime_dir }}"
      register: __podman_service_started
      when:
        - __podman_created is changed
        - __podman_activate_systemd_unit | bool

    - name: Restart service
      systemd:
        name: "{{ __podman_service_name }}"
        scope: "{{ __podman_systemd_scope }}"
        state: restarted
      become: "{{ __podman_rootless | ternary(true, omit) }}"
      become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"
      environment:
        XDG_RUNTIME_DIR: "{{ __podman_xdg_runtime_dir }}"
      when:
        - not __podman_service_started is changed
        - __podman_updated is changed or __podman_image_updated is changed
        - __podman_activate_systemd_unit | bool

    - name: Ensure auto update is running for images
      become: "{{ __podman_rootless | ternary(true, omit) }}"
      become_user: "{{ __podman_rootless | ternary(__podman_user, omit) }}"
      environment:
        XDG_RUNTIME_DIR: "{{ __podman_xdg_runtime_dir }}"
      systemd:
        name: podman-auto-update.timer
        daemon_reload: true
        scope: "{{ __podman_systemd_scope }}"
        state: started
        enabled: true
