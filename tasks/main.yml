# SPDX-License-Identifier: MIT
---
- name: Set platform/version specific variables
  include_tasks: set_vars.yml

- name: Gather the package facts
  package_facts:

- name: Ensure required packages are installed
  package:
    name: "{{ __podman_packages }}"
    state: present
  become: true
  when: (__podman_packages | difference(ansible_facts.packages))

- name: Get podman version
  command: podman --version
  changed_when: false
  register: __podman_version_output

- name: podman package version must be 4.2 or later
  fail:
    msg: >
      podman package version {{ __podman_version }} is too old -
      must be 4.2 or later
  when: __podman_version is version("4.2", "<")
  vars:
    __podman_version: "{{
      (__podman_version_output.stdout.split())[2] }}"

- name: Get user information
  getent:
    database: passwd
    key: "{{ podman_run_as_user }}"
    fail_key: false

- name: Fail if user does not exist
  fail:
    msg: >
      The given podman user [{{ podman_run_as_user }}] does not exist -
      cannot continue
  when: not ansible_facts['getent_passwd'][podman_run_as_user]

- name: Set config file paths
  set_fact:
    __podman_container_conf_file: "{{ __podman_containers_conf_system
      if podman_run_as_user == 'root' else
      __podman_user_home_dir ~ '/' ~ __podman_containers_conf_user }}"
    __podman_registries_conf_file: "{{ __podman_registries_conf_system
      if podman_run_as_user == 'root' else
      __podman_user_home_dir ~ '/' ~ __podman_registries_conf_user }}"
    __podman_storage_conf_file: "{{ __podman_storage_conf_system
      if podman_run_as_user == 'root' else
      __podman_user_home_dir ~ '/' ~ __podman_storage_conf_user }}"
    __podman_policy_json_file: "{{ __podman_policy_json_system
      if podman_run_as_user == 'root' else
      __podman_user_home_dir ~ '/' ~ __podman_policy_json_user }}"
  vars:
    __podman_user_home_dir: "{{
      ansible_facts['getent_passwd'][podman_run_as_user][4] }}"

- name: Handle container.conf.d
  include_tasks: handle_container_conf_d.yml

- name: Handle registries.conf.d
  include_tasks: handle_registries_conf_d.yml

- name: Handle storage.conf
  include_tasks: handle_storage_conf.yml

- name: Handle policy.json
  include_tasks: handle_policy_json.yml

# This task should ensure that __podman_containers has only
# parameters valid for containers.podman.podman_container - other
# parameters should be stripped out into separate vars
- name: Manage firewall for specified ports
  include_role:
    name: fedora.linux_system_roles.firewall
  vars:
    firewall: "{{ podman_firewall }}"
  when: podman_firewall | length > 0

- name: Manage selinux for specified ports
  include_role:
    name: fedora.linux_system_roles.selinux
  vars:
    selinux_ports: "{{ podman_selinux_ports }}"
  when: podman_selinux_ports | length > 0

- name: Handle Kubernetes specifications
  include_tasks: handle_kube_spec.yml
  loop: "{{ podman_kube_specs }}"
  loop_control:
    loop_var: __podman_kube_spec_item
